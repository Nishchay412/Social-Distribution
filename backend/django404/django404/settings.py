"""
Django settings for django404 project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
import socket
from pathlib import Path
from dotenv import load_dotenv
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file (if any)
load_dotenv(os.path.join(BASE_DIR, '.env'))
NODE_API_KEY = os.environ.get("NODE_API_KEY")

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-(q7a3&88((h*iiibynt7lckjb+dk$dptv=!1-b3n^1f%a@by=c'
DEBUG = False

STATIC_URL = '/static/'
STATIC_ROOT = str(BASE_DIR / 'staticfiles')

ALLOWED_HOSTS = [
    '2605:fd00:4:1001:f816:3eff:fe8c:5c2d',     # Node 1 IPv6 (unbracketed)
    '[2605:fd00:4:1001:f816:3eff:fe8c:5c2d]',   # Node 1 IPv6 (bracketed)
    '370bd.yeg.rac.sh',
    '3713a.yeg.rac.sh',
    '2605:fd00:4:1001:f816:3eff:fecc:9717',     # Node 2 IPv6 (unbracketed)
    '[2605:fd00:4:1001:f816:3eff:fecc:9717]' ,  # Node 2 IPv6 (bracketed)
     '2605:fd00:4:1001:f816:3eff:fe3e:c88d',    # Node 3 IPv6 (unbracketed)
    '[2605:fd00:4:1001:f816:3eff:fe3e:c88d]',   # Node 3 IPv6 (bracketed)
    '2605:fd00:4:1001:f816:3eff:fe2b:1955',     # Node 4 IPv6 (unbracketed) 
    '[2605:fd00:4:1001:f816:3eff:fe2b:1955]',   # Node 4 IPv6 (bracketed) 
    '2605:fd00:4:1001:f816:3eff:fe30:2aee',     # Node 5 IPv6 (unbracketed) 
    '[2605:fd00:4:1001:f816:3eff:fe30:2aee]',   # Node 5 IPv6 (bracketed) 
    '2605:fd00:4:1001:f816:3eff:fe1d:66cc',     # Node 12 IPv6 (unbracketed) 
    '[2605:fd00:4:1001:f816:3eff:fe1d:66cc]',   # Node 12 IPv6 (bracketed) 
    '2605:fd00:4:1001:f816:3eff:fee4:209d',     # Node 4 (Riyasat) IPv6 (unbracketed)
    '[2605:fd00:4:1001:f816:3eff:fee4:209d]',   # Node 4 (Riyasat) IPv6 (bracketed)

]

# Node configuration for inter-node communication (used by utility functions)
NODE_CONFIG = {
    'node1': {
        'url': 'http://[2605:fd00:4:1001:f816:3eff:fe8c:5c2d]:8000',
        'api_key': 'eca92496df745dc547e3f6a4e19005fee588f1da05af9eebc84d7bc04d608c9d',
    },
    'node2': {
        'url': 'http://[2605:fd00:4:1001:f816:3eff:fecc:9717]:8000',
        'api_key': 'eca92496df745dc547e3f6a4e19005fee588f1da05af9eebc84d7bc04d608c9d',
    },
    'node3': {
        'url': 'http://[2605:fd00:4:1001:f816:3eff:fe3e:c88d]:8000',
        'api_key': NODE_API_KEY,
    },
    'node4': {
        'url': 'http://[2605:fd00:4:1001:f816:3eff:fee4:209d]:8000',
        'api_key': NODE_API_KEY,
    },
    'node5': {
        'url': 'http://[2605:fd00:4:1001:f816:3eff:fe30:2aee]:8000/',
        'api_key': NODE_API_KEY,
    },
    'node6': {
        'url': 'http://[2605:fd00:4:1001:f816:3eff:fe2b:1955]:8000/',
        'api_key': NODE_API_KEY,
    },
    'node12': {
        'url': 'http://[2605:fd00:4:1001:f816:3eff:fe1d:66cc]:8000/',
        'api_key': NODE_API_KEY,
    },
}

# Application definition
AUTH_USER_MODEL = 'myapp.User'

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',  # For CORS support if using React
    'myapp',
    'rest_framework_simplejwt.token_blacklist',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # Must come early
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'django404.urls'
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
    "http://127.0.0.1:5173",
    "http://[2605:fd00:4:1001:f816:3eff:fe3e:c88d]:8000",
    "http://[2605:fd00:4:1001:f816:3eff:fecc:9717]:8000",
    "http://[2605:fd00:4:1001:f816:3eff:fe8c:5c2d]:8000",
    "http://[2605:fd00:4:1001:f816:3eff:fe2b:1955]:8000",
    "http://[2605:fd00:4:1001:f816:3eff:fe30:2aee]:8000",   # Node 5
    "http://[2605:fd00:4:1001:f816:3eff:fe1d:66cc]:8000",   # Node 12
    "http://[2605:fd00:4:1001:f816:3eff:fee4:209d]:8000",   # Node 4 (your node)

]
CORS_ALLOW_CREDENTIALS = True
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'AUTH_HEADER_TYPES': ('Bearer',),
}

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'django404.wsgi.application'

# ---- Database Configuration Based on Instance ----
# Use socket.gethostname() to automatically detect the current machine's hostname.
current_hostname = socket.gethostname()
print("Current hostname:", current_hostname)  # Debug log; remove in production

# Map your Cybera instance hostnames to identifiers.
# Replace these keys with the actual hostnames returned by socket.gethostname() on your Cybera instances.
HOSTNAME_TO_INSTANCE = {
    "404groupproject": "node1",      # For example, Node 1's hostname
    "404groupproject-1": "node2",# Node 2's hostname
    "qingqiu404project":"node3",  
    "83c98358ca70": "node3",
    "verdigras":"node5",
    "yc": "node6",
    "testnode":"node12",
    "part3":"node4"
}

# Determine the instance based on the current hostname. Default to node1 if not found.
INSTANCE_NAME = HOSTNAME_TO_INSTANCE.get(current_hostname, "node1")
print("INSTANCE_NAME determined as:", INSTANCE_NAME)  # Debug log

# Set up DATABASES based on INSTANCE_NAME.
if INSTANCE_NAME == "node1":
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'verdigris',  # Database for Node 1
            'USER': '404group',
            'PASSWORD': 'postgres',
            'HOST': 'localhost',
            'PORT': '5432',
        }
    }
elif INSTANCE_NAME == "node2":
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'verdigris_node2',  # Database for Node 2
            'USER': '404group',
            'PASSWORD': 'postgres',
            'HOST': 'localhost',
            'PORT': '5432',
        }
    }
elif INSTANCE_NAME == "node3":
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'verdigris_node3',  # Database for Node 3
            'USER': '404group',
            'PASSWORD': 'postgres',
            'HOST': 'localhost',
            'PORT': '5432',
        }
    } 
elif INSTANCE_NAME == "node5":
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'verdigris_node5',  # Database for Node 3
            'USER': '404group',
            'PASSWORD': 'postgres',
            'HOST': 'localhost',
            'PORT': '5432',
        }
    }  
elif INSTANCE_NAME == "node12":
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'verdigris_node12',  # Database for Node 3
            'USER': '404group',
            'PASSWORD': 'postgres',
            'HOST': 'localhost',
            'PORT': '5432',
        }
    }

elif INSTANCE_NAME == "node4":
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'verdigris_node4',  # Database for Node 4 (Riyasat)
            'USER': '404group',
            'PASSWORD': 'postgres',
            'HOST': 'localhost',
            'PORT': '5432',
        }
    }
           
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'verdigris_default',
            'USER': '404group',
            'PASSWORD': 'postgres',
            'HOST': 'localhost',
            'PORT': '5432',
        }
    }
# ------------------------------------------------------

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
